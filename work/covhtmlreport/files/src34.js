var g_data = {"name":"../rtl/dut_top.v","src":"module dut_top\n#(\n    parameter                           DATA_SIZE = 8	        ,\n    parameter                           ADDR_SIZE = 8\n)\n(\n    input                               i2c_core_clk_i          ,   // clock core of i2c\n    input                               pclk_i                  ,   //  APB clock\n    input                               preset_n_i              ,   //  reset signal is active-LOW\n    input   [ADDR_SIZE - 1 : 0]         paddr_i                 ,   //  address of APB slave and register map\n    input                               pwrite_i                ,   //  HIGH is write, LOW is read\n    input                               psel_i                  ,   //  select slave interface\n    input                               penable_i               ,   //  Enable. PENABLE indicates the second and subsequent cycles of an APB transfer.\n    input   [DATA_SIZE - 1 : 0]         pwdata_i                ,   //  data write\n\n    output  [DATA_SIZE - 1 : 0]         prdata_o                ,   //  data read\n    output                              pready_o                ,   //  ready to receive data\n    output                              start                   ,\n    output                              stop                    ,\n    output  [DATA_SIZE - 1 : 0]         data_slave_read         ,\n    output                              data_slave_read_valid   ,\n    inout                               sda_io                  ,\n    inout                               scl_io\n);\n\n    i2c_top master(\n        .i2c_core_clk_i(i2c_core_clk_i)                                                 ,\n        .pclk_i(pclk_i)                                                                 ,\n        .preset_ni(preset_n_i)                                                         	,\n        .penable_i(penable_i)                                                           ,\n        .psel_i(psel_i)                                                                 ,\n        .paddr_i(paddr_i)                                                               ,\n        .pwdata_i(pwdata_i)                                                             ,\n        .pwrite_i(pwrite_i)                                                             ,\n        .prdata_o(prdata_o)                                                             ,\n        .pready_o(pready_o)                                                             ,\n        .sda(sda_io)                                                                    ,\n        .scl(scl_io)\n    );\n\n    i2c_slave_model slave(\n        .sda(sda_io)                                                                    ,\n        .scl(scl_io)                                                                    ,\n        .data_slave_read(data_slave_read)                                               ,\n        .data_slave_read_valid(data_slave_read_valid)                                   ,\n        .start(start)                                                                   ,\n        .stop(stop)\n    );\n\nendmodule","lang":"verilog"};
processSrcData(g_data);