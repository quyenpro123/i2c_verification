var g_data = {"name":"../rtl/i2c_top.v","src":"module i2c_top      #(parameter     DATA_SIZE   =   8   ,\n                      parameter     ADDR_SIZE   =   8   )\n(\n    input                               i2c_core_clk_i      ,   // clock core of i2c\n    input                               pclk_i              ,   //  APB clock\n    input                               preset_ni           ,   //  reset signal is active-LOW\n    input   [ADDR_SIZE - 1 : 0]         paddr_i             ,   //  address of APB slave and register map\n    input                               pwrite_i            ,   //  HIGH is write, LOW is read\n    input                               psel_i              ,   //  select slave interface\n    input                               penable_i           ,   //  Enable. PENABLE indicates the second and subsequent cycles of an APB transfer.\n    input   [DATA_SIZE - 1 : 0]         pwdata_i            ,   //  data write\n\n    output  [DATA_SIZE - 1 : 0]         prdata_o            ,   //  data read\n    output                              pready_o            ,   //  ready to receive data\n    inout                               sda                 ,\n    inout                               scl             \n);\n\n\n \n    // Decalar netlist\n    wire                        i2c_sda_en                      ;\n    wire                        i2c_scl_en                      ;\n    wire                        i2c_sda                         ;\n    wire                        i2c_scl                         ;\n\n    wire                        clk_en                          ;\n    wire                        reset_n                         ;\n    wire                        enable                          ;\n    wire                        repeat_start                    ;\n    wire                        rw                              ;\n	wire						w_fifo_en						;\n	wire						r_fifo_en_o						;\n    wire                        sda_low_en                      ;\n    wire                        write_data_en                   ;\n    wire                        write_addr_en                   ;\n    wire                        receive_data_en                 ;\n    wire	[3:0]               count_bit                       ;\n\n    wire  [DATA_SIZE - 1 : 0]   data                            ;\n    wire  [DATA_SIZE - 1 : 0]   data_from_sda                   ;\n    wire  [DATA_SIZE - 1 : 0]   data_to_sda                     ;\n    wire  [DATA_SIZE - 1 : 0]   data_to_apb                     ;\n    wire  [7:0]                 to_status_reg                   ;\n    wire  [7:0]                 data_from_apb                   ;\n    wire  [7:0]                 slave_address               	;\n    wire  [7:0]                 command                         ;\n	wire  [7:0]					status							;\n    wire  [7:0]                 prescale                        ;\n\n    wire                        start_done                      ;\n    wire                        reset_done                      ;\n\n    assign      sda     =   i2c_sda_en ? i2c_sda : 1'bz         ;\n    assign      scl     =   i2c_scl_en ? i2c_scl : 1         ;\n\n    pullup (sda)    ;\n    //pullup (scl)    ;\n\n    // get command bit\n    assign      enable          =       command[6]            ;\n    assign      reset_n         =       command[7]            ;\n    assign      repeat_start    =       command[5]            ;\n    assign      rw              =       slave_address[0]      ;\n\n    // get tx-empty, rx-full from status reg\n    assign      tx_empty        =       status[7]   ;	\n    assign      rx_full         =       status[2]   ;\n\n    // push data to i2c line\n    assign      i2c_sda_o       =       i2c_sda     ;\n    assign      i2c_scl_o       =       i2c_scl     ;\n\n    // dut\n    clock_generator                              clock_generator \n    (\n		.i2c_core_clk_i	    (i2c_core_clk_i     )     ,   // i2c core clock\n    	.clk_en_i		    (clk_en		        )     ,   // enbale clock to scl\n		.reset_ni		    (reset_n		    )	  ,\n        .prescale_i         (prescale           )     ,\n    	.i2c_scl_o 		    (i2c_scl		    )         // scl output\n    );\n\n\n    i2c_master_fsm                                  i2c_master_fsm\n    (\n        .enable_i           (enable             )      ,   // enable signal from MCU\n    	.reset_ni           (reset_n            )      ,   // reset negative signal from MCU\n    	.repeat_start_i     (repeat_start       )      ,   // repeat start signal from MCU\n    	.rw_i               (rw                 )      ,   // bit 1 is read - 0 is write\n    	.full_i             (rx_full            )      ,   // FIFO buffer is full\n    	.empty_i            (tx_empty           )      ,   // FIFO buffer is empty\n    	.i2c_core_clk_i     (i2c_core_clk_i     )      ,   // i2c core clock\n    	.i2c_sda_i          (sda                )      ,   // i2c sda feedback to FSM\n    	.i2c_scl_i          (scl                )      ,   // i2c scl feedback to FSM\n\n		.w_fifo_en_o		(w_fifo_en			)		,\n		.r_fifo_en_o		(r_fifo_en			)		,\n\n    	.sda_low_en_o       (sda_low_en         )      ,   // when = 1 enable sda down 0\n    	.clk_en_o           (clk_en             )      ,   // enbale to generator clk\n    	.write_data_en_o    (write_data_en      )      ,   // enable write data on sda\n    	.write_addr_en_o    (write_addr_en      )      ,   // enable write address of slave on sda\n    	.receive_data_en_o  (receive_data_en    )      ,   // enable receive data from sda\n    	.count_bit_o        (count_bit          )      ,   // count bit data from 7 down to 0\n    	.i2c_sda_en_o       (i2c_sda_en         )      ,   // allow impact to sda\n    	.i2c_scl_en_o       (i2c_scl_en         )      ,   // allow impact to scl\n        .start_done_o       (start_done         )      ,\n        .reset_done_o       (reset_done         )\n    );\n\n\n    data_path_i2c_to_core   # (DATA_SIZE    , ADDR_SIZE    )                           \n    data_path_i2c_to_core (\n        .data_i               (data_to_sda      )         ,   // data from fifo buffer\n        .addr_i               (slave_address    )         ,   // address of slave\n        .count_bit_i          (count_bit        )         ,   // sda input\n        .i2c_core_clk_i       (i2c_core_clk_i   )         ,\n        .reset_ni             (reset_n          )         ,\n        .i2c_sda_i            (sda              )         ,   // sda line\n\n        .sda_low_en_i         (sda_low_en       )         ,   // control sda signal from FSM, when 1 sda = 0\n        .write_data_en_i      (write_data_en    )         ,   // enable write data signal from FSM\n        .write_addr_en_i      (write_addr_en    )         ,   // enable write slave's signal to sda \n        .receive_data_en_i    (receive_data_en  )         ,   // enable receive data from sda\n\n        .data_from_sda_o      (data_from_sda    )         ,   // data from sda to write to FIFO buffer\n        .i2c_sda_o            (i2c_sda          )            // i2c sda output   \n    );\n\n\n    data_fifo_mem # (DATA_SIZE, ADDR_SIZE)      data_fifo_mem (\n        .pclk_i             (pclk_i         )   ,   // APB clock\n        .i2c_core_clk_i     (i2c_core_clk_i )   ,   // i2c clock core\n        .command_i          (command        )   ,   // command from MCU include: enable, repeat_start, reset, r/w, winc, rinc\n        .data_from_apb_i    (data_from_apb  )   ,   // data from apb transfer to TX-FIFO\n        .data_from_sda_i    (data_from_sda  )   ,   // data from sda transfer to RX-FIFO\n        .r_tx_fifo_en_i     (r_fifo_en      )   ,   // enable read data from TX-FIFO\n        .w_rx_fifo_en_i     (w_fifo_en      )   ,   // enable write data to RX-FIFO\n\n        .data_to_apb_o      (data_to_apb    )   ,   // data receive from sda, which transfer to apb interface\n        .data_to_sda_o      (data_to_sda    )   ,   // data which receive from apb and then transfer to data_path\n        .status_o           (status		    )       // full, empty status of TX and RX memory\n    );\n\n\n    apb_slave_interface # (DATA_SIZE, ADDR_SIZE)    apb_slave_interface (\n        .pclk_i             (pclk_i         )         ,   //  clock\n        .preset_ni          (preset_ni      )         ,   //  reset signal is active-LOW\n        .paddr_i            (paddr_i        )         ,   //  address of APB slave and register map\n        .pwrite_i           (pwrite_i       )         ,   //  HIGH is write, LOW is read\n        .psel_i             (psel_i         )         ,   //  select slave interface\n        .penable_i          (penable_i      )         ,   //  Enable. PENABLE indicates the second and subsequent cycles of an APB transfer.\n        .pwdata_i           (pwdata_i       )         ,   //  data write\n        .to_status_reg_i    (status         )         ,\n	    .data_fifo_i        (data_to_apb    )	      ,   //  data from FIFO memory\n\n        .prdata_o           (prdata_o       )         ,   //  data read\n        .pready_o           (pready_o       )         ,   //  ready to receive data\n        .reg_transmit_o     (data_from_apb  )         ,\n        .reg_slave_address_o(slave_address  )         ,\n        .reg_command_o      (command        )         ,\n        .reg_prescale_o     (prescale       )         ,\n        .start_done_i       (start_done     )         ,\n        .reset_done_i       (reset_done     )\n    );\nendmodule","lang":"verilog"};
processSrcData(g_data);