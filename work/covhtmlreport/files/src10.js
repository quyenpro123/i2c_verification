var g_data = {"name":"../rtl/data_path_i2c_to_core.v","src":"module data_path_i2c_to_core    # ( parameter     DATA_SIZE   =   8 , \n                                    parameter     ADDR_SIZE   =   8 )    \n(\n    input   [DATA_SIZE - 1 : 0]         data_i              ,   // data from fifo buffer\n    input   [ADDR_SIZE - 1 : 0]         addr_i              ,   // address of slave\n    input   [3 : 0]                     count_bit_i         ,   // sda input\n    input                               i2c_core_clk_i      ,   // i2c core clock\n    input                               reset_ni            ,   // reset negetive signal from MCU\n    input                               i2c_sda_i           ,   // sda line\n\n    input                               sda_low_en_i        ,   // control sda signal from FSM, when 1 sda = 0\n    input                               write_data_en_i     ,   // enable write data signal from FSM\n    input                               write_addr_en_i     ,   // enable write slave's signal to sda \n    input                               receive_data_en_i   ,   // enable receive data from sda\n\n    output  [DATA_SIZE - 1 : 0]         data_from_sda_o     ,   // data from sda to write to FIFO buffer\n    output                              i2c_sda_o              // i2c sda output   \n                     \n);\n    \n    reg     	[DATA_SIZE - 1 : 0]         data_from_sda       		;\n	reg										i2c_sda			 			;\n\n	assign		i2c_sda_o			=		i2c_sda							;\n    assign      data_from_sda_o	   	=   	data_from_sda       			;\n\n\n    // read-write data to sda\n    always @(posedge    i2c_core_clk_i,     negedge     reset_ni  ) begin\n\n        if (~reset_ni) begin\n            data_from_sda   <=      0                           ;\n            i2c_sda         <=      0                           ;\n        end\n\n        else begin\n\n            if (sda_low_en_i) begin\n                i2c_sda	       <=       0                               ;\n            end \n\n            else if (write_addr_en_i) begin\n                i2c_sda	       <=       addr_i[count_bit_i]             ;\n            end\n\n            else if (receive_data_en_i) begin\n                data_from_sda[count_bit_i]   <=       i2c_sda_i       ;  \n            end\n\n            else if (write_data_en_i) begin\n                i2c_sda	       <=      data_i[count_bit_i]              ;\n            end\n\n            else begin\n                i2c_sda	       <=      i2c_sda                                ;\n            end\n\n        end\n\n    end     \n\n\nendmodule\n","lang":"verilog"};
processSrcData(g_data);