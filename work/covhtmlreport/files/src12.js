var g_data = {"name":"../rtl/fifo_toplevel.v","src":"\nmodule fifo_toplevel	# (	parameter	DATASIZE	=	8,\n							parameter	ADDRSIZE	=	4)\n(\n	input		[DATASIZE - 1 : 0]		wdata_i			, // data which write to FIFO buffer\n\n	input								winc_i			, // write increase how many cells\n	input								wclk_i			, // The clock of write-domain\n	input								wrst_ni			, // The negative reset signal of write-domain\n\n	input								rinc_i			, // read increase how many cells\n	input								rclk_i			, // The clock of read-domain\n	input								rrst_ni			, // The negative reset signal of read-domain\n\n	output		[DATASIZE - 1 : 0]		rdata_o			, // Data which read from FIFO buffer\n	output								rempty_o		, // State of FIFO buffer is empty\n	output								wfull_o			,  // State of FIFO buffer is full\n	output								r_almost_empty_o,	// almost empty\n	output								w_almost_full_o		// almost full\n	\n);\n\n	wire	[ADDRSIZE - 1 : 0]		raddr		; \n	wire	[ADDRSIZE - 1 : 0]		waddr		;\n\n	wire	[ADDRSIZE 	  : 0]		rptr		;\n	wire	[ADDRSIZE 	  : 0]		rq2_wptr	;\n	wire	[ADDRSIZE 	  : 0]		wptr		;\n	wire	[ADDRSIZE 	  : 0]		wq2_rptr	;\n\n	assign		rst_ni		=		rrst_ni & wrst_ni	;\n\n	fifo_mem	# (DATASIZE, ADDRSIZE)	fifo_mem1\n	(\n		.wdata_i  (wdata_i 	)	, // DATA write to FIFO buffer\n    	.waddr_i  (waddr	)	, // Address of FIFO memory where data written\n    	.raddr_i  (raddr	)	, // Address of FIFO memory where data read\n    	.wclk_i   (wclk_i	)	, // Clock of write domain\n    	.wclken_i (winc_i	)	, // Write clock enable\n    	.wfull_i  (wfull_o	)	, // Write full , memory full can not write\n    	.rdata_o  (rdata_o	)	  // DATA read from FIFO buffer  \n	);\n\n	rptr_empty	# (ADDRSIZE)	rptr_empty1\n	(\n    	.rq2_wptr_i (rq2_wptr)  , // The pointer synchronized from write_pointer to read-domain\n    	.rinc_i     (rinc_i	 )	, // Read increase how many memory cells\n    	.rclk_i     (rclk_i  )	, // The clock of read-domain\n    	.rrst_ni    (rrst_ni )	, // The negative reset signal of read-domain\n    	.rempty_o   (rempty_o)	, // Output is the buffer is empty, can not read\n    	.raddr_o    (raddr   )	, // Address used to read data from FIFO memory\n    	.rptr_o     (rptr    )	,  // The gray-pointer of read-domain used for synchronization to write-domain\n		.r_almost_empty_o (r_almost_empty_o)\n	);\n\n	wptr_full	# (ADDRSIZE)	wptr_full1\n	(\n		.wq2_rptr_i	(wq2_rptr)	, // The pointer synchronized from read-domain to write-domain\n		.winc_i		(winc_i	 )	, // Write increase how many cells\n		.wclk_i		(wclk_i	 )	, // The clock of write-domain\n		.wrst_ni	(wrst_ni )	, // The negative reset signal of write-domain\n		.wfull_o	(wfull_o )	, // Output is the buffer is full, can not write\n		.wptr_o		(wptr	 )	, // The gray-pointer of write-domain used for synchronization to read-domain\n		.waddr_o	(waddr	 ) 	, // The address used write data to FIFO memory\n		.w_almost_full_o (w_almost_full_o)\n	);\n\n	sync_r2w	# (ADDRSIZE)	sync_r2w1\n	(\n	    .rptr_i     (rptr	 )	, // read pointer passed to write-domain\n    	.wclk_i     (wclk_i	 )	, // Clock of write-domain\n    	.wrst_ni    (wrst_ni )  , // Negative reset signal of write-domain\n    	.wq2_rptr_o (wq2_rptr) 	  // The pointer synchronized from read-domain to write-domain\n	);	\n\n	sync_w2r	# (ADDRSIZE)	sync_w2r1\n	(\n	    .wptr_i     (wptr	 )	, // The write pointer passed to read-domain\n    	.rclk_i     (rclk_i	 )	, // The clock of read-domain\n    	.rrst_ni    (rrst_ni )	, // The negative reset of read-domain\n    	.rq2_wptr_o (rq2_wptr)    // The pointer synchronized from write-domain to read-domain\n	);\n\nendmodule\n\n","lang":"verilog"};
processSrcData(g_data);