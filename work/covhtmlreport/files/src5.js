var g_data = {"name":"../sim/top.sv","src":"`include \"transactor.sv\"\n`include \"generator.sv\"\n`include \"interface.sv\"\n`include \"driver.sv\"\n`include \"env.sv\"\n`include \"assertion.sv\"\n\n`ifdef TEST_1_2\n  `include \"test_1_2.sv\"\n`elsif TEST_2\n  `include \"test_2.sv\"\n`elsif TEST_3\n  `include \"test_3.sv\"\n`elsif TEST_4\n  `include \"test_4.sv\"\n`elsif TEST_5\n  `include \"test_5.sv\"\n`elsif TEST_6\n  `include \"test_6.sv\"\n`elsif TEST_7\n  `include \"test_7.sv\"\n`elsif TEST_8\n  `include \"test_8.sv\"\n`elsif TEST_9\n  `include \"test_9.sv\"\n`elsif TEST_10\n  `include \"test_10.sv\"\n`elsif TEST_11\n  `include \"test_11.sv\"\n`elsif TEST_12\n  `include \"test_12.sv\"\n`elsif TEST_13\n  `include \"test_13.sv\"\n`elsif TEST_14\n  `include \"test_14.sv\"\n`endif\n  module top();\n      reg pclk = 0;\n      reg i2c_core_clock = 0;\n      always #20 i2c_core_clock = ~i2c_core_clock ;\n      always #5 pclk = ~pclk;\n     \n      intf_cnt vif(pclk, i2c_core_clock);\n      i2c_top master(\n        .i2c_core_clk_i(vif.i2c_core_clock)                                                 ,\n        .pclk_i(vif.pclk)                                                                   ,\n        .preset_ni(vif.preset)                                                              ,\n        .penable_i(vif.penable)                                                             ,\n        .psel_i(vif.psel)                                                                   ,\n        .paddr_i(vif.paddr)                                                                 ,\n        .pwdata_i(vif.pwdata)                                                               ,\n        .pwrite_i(vif.pwrite)                                                               ,\n        .prdata_o(vif.prdata_o)                                                             ,\n        .pready_o(vif.pready_o)                                                             ,\n        .sda(vif.sda_io)                                                                    ,\n        .scl(vif.scl_io)\n    );\n\n    i2c_slave_model slave(\n        .sda(vif.sda_io)                                                                    ,\n        .scl(vif.scl_io)                                                                    ,\n        .data_slave_read(vif.data_slave_read)                                               ,\n        .data_slave_read_valid(vif.data_slave_read_valid)                                   ,\n        .start(vif.start)                                                                   ,\n        .stop(vif.stop)\n    );\n    testcase test(vif);\n    assertion_cov assert_cov(vif);\n   endmodule\n","lang":"verilog"};
processSrcData(g_data);