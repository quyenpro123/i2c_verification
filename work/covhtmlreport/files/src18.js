var g_data = {"name":"../rtl/apb_slave_interface.v","src":"module apb_slave_interface  #(parameter     DATA_WIDTH  =   8,\n                              parameter     ADDR_WIDTH  =   8) \n(\n    input                               pclk_i              ,   //  clock\n    input                               preset_ni           ,   //  reset signal is active-LOW\n    input   [ADDR_WIDTH - 1 : 0]        paddr_i             ,   //  address of APB slave and register map\n    input                               pwrite_i            ,   //  HIGH is write, LOW is read\n    input                               psel_i              ,   //  select slave interface\n    input                               penable_i           ,   //  Enable. PENABLE indicates the second and subsequent cycles of an APB transfer.\n    input   [DATA_WIDTH - 1 : 0]        pwdata_i            ,   //  data write\n    input   [7:0]                       to_status_reg_i     ,   //  status of FIFO memory\n    input   [7:0]                       data_fifo_i         ,   //  data from FIFO memory\n    input                               start_done_i        ,   //  i2c-core done start, let turn off enable\n    input                               reset_done_i        ,   //  i2c-core done reset, let turn off reset\n\n    output  [DATA_WIDTH - 1 : 0]        prdata_o            ,   //  data read\n    output                              pready_o            ,   //  ready to receive data\n    output     [7:0]                    reg_transmit_o      ,   //  register\n    output     [7:0]                    reg_slave_address_o ,   //  register\n    output     [7:0]                    reg_command_o       ,   //  register\n    output     [7:0]                    reg_prescale_o          //  register\n\n);\n\n    // Decalar register map\n    reg     [7:0]                       reg_transmit            ;   //  0x00\n    reg     [7:0]                       reg_slave_address       ;   //  0x03\n    reg     [7:0]                       reg_command             ;   //  0x04\n    reg     [7:0]                       reg_prescale            ;   //  0x05\n\n    //  Decalar reg of output\n    reg     [DATA_WIDTH - 1 : 0]        prdata              ;\n\n    // Connect to Output\n    assign      prdata_o                =   prdata              ;\n    assign      reg_transmit_o          =   reg_transmit        ;\n    assign      reg_slave_address_o     =   reg_slave_address   ; \n    assign      reg_command_o           =   reg_command         ;\n    assign      reg_prescale_o          =   reg_prescale        ;\n	assign 		pready_o				=	psel_i ? 1 : 0		;\n\n    //  Write transfer with no wait states\n    always @(posedge    pclk_i,    negedge  preset_ni) begin\n\n        if (~preset_ni) begin\n\n            prdata                  <=      0       ;\n            reg_transmit            <=      0       ;\n            reg_slave_address       <=      0       ;\n            reg_command             <=      0       ;\n            reg_prescale            <=      0       ;\n\n        end \n\n        else begin\n			\n            // pwrite HIGH and psel HIGHT, this is write cycle\n            if (penable_i == 1 && psel_i == 1 && pwrite_i == 1) begin\n                \n                case (paddr_i)\n\n                    0       :	begin						// When data into reg_transmit, enable write data to TX-FIFO\n						reg_transmit    <=  pwdata_i    ;\n						reg_command[3]	<=	1			;\n					end\n\n                    3       :       reg_slave_address       <=  pwdata_i    	;\n                    4       :       reg_command             <=  pwdata_i        ;\n                    5       :       reg_prescale            <=  pwdata_i    	; \n  \n                    default :	begin\n						reg_transmit    <=  pwdata_i    ;\n						reg_command[3]	<=	1			;\n					end\n\n                endcase\n            end\n            else if (reset_done_i) begin\n                reg_command[7]  <=  1   ;\n            end\n            else if (start_done_i) begin\n                reg_command[6]  <=  0   ;\n            end\n\n\n			if (reg_command[3] == 1) begin\n				reg_command[3]	<=	0	; \n			end\n            \n            // pwrite Low and psel HIGHT, this is read cycle\n            if ( (psel_i == 1) && (pwrite_i == 0) && (penable_i == 0) )begin\n                \n                case (paddr_i)\n\n                    0       :       prdata            <=  reg_transmit      ;\n\n                    1       :       begin\n										prdata          <=  data_fifo_i     ;\n										reg_command[0]	<=	1				;	// READ next byte of RX-FIFO\n									end\n\n                    2       :       prdata            <=  to_status_reg_i   ;\n                    3       :       prdata            <=  reg_slave_address ;\n                    4       :       prdata            <=  reg_command       ;\n                    5       :       prdata            <=  reg_prescale      ;   \n                    default :       prdata            <=  data_fifo_i       ;\n\n                endcase     \n            end\n\n			// enable to read data from RX-FIFO only 1 cycle\n			if (reg_command[0]	==	1) begin\n				reg_command[0] 	<=	0	;\n			end\n\n        end\n\n    end\n\nendmodule","lang":"verilog"};
processSrcData(g_data);