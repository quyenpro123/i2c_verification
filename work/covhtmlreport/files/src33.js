var g_data = {"name":"../sim/assertion.sv","src":"`ifndef ASSERT\n`define ASSERT\n`include \"interface.sv\"\n   module assertion_cov(intf_cnt intf);\n	int i = 0;\n\n	always @(negedge intf.data_slave_read_valid) \n	begin\n		if (intf.preset)\n		begin\n			check_data_master_sent: assert (intf.data_slave_read == intf.data_master[i]) $display(\"Assertion: Slave received successfully data %0x from master\", intf.data_slave_read); else \n                                $error(\"Assertion: Slave received data: %0x!\", intf.data_slave_read);\n			$display(\" data master sent: i = %0d, data = %0x\", i, intf.data_master[i]);\n			i <= i + 1;\n		end\n	end\n	\n	always @(posedge intf.stop)\n		i <= 0;\n\n	check_psel_penable_1: cover property(@(posedge intf.pclk) intf.psel ##1 intf.penable);\n	check_psel_penable_2: cover property(@(posedge intf.pclk) ~intf.psel |-> ~intf.penable);\n	check_sda_scl_reset: cover property(@(posedge intf.pclk) (intf.psel && intf.penable && intf.pwrite && (intf.paddr == 4) && ~intf.pwdata[7]) |-> (intf.sda_io && intf.scl_io));\n   endmodule\n`endif\n","lang":"verilog"};
processSrcData(g_data);