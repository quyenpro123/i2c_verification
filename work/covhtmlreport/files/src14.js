var g_data = {"name":"../rtl/rptr_empty.v","src":"// read pointer and empty logic\n//The n-bit pointer ( rptr ) is passed to the write clock domain through the sync_r2w module. \n//The (n-1)-bit pointer ( raddr ) is used to address the FIFO buffer.\n\nmodule rptr_empty # (parameter  ADDRSIZE = 4 )\n(\n    input       	[ADDRSIZE : 0]      rq2_wptr_i  , // The pointer synchronized from write_pointer to read-domain\n    input                          		rinc_i      , // Read increase how many memory cells\n    input                          	 	rclk_i      , // The clock of read-domain\n    input                           	rrst_ni     , // The negative reset signal of read-domain\n    output                       	    rempty_o    , // Output is the buffer is empty, can not read\n    output  	 	[ADDRSIZE - 1 : 0]  raddr_o     , // Address used to read data from FIFO memory\n    output	    	[ADDRSIZE : 0]      rptr_o      , // The gray-pointer of read-domain used for synchronization to write-domain\n	output							    r_almost_empty_o	// Almost empty\n      \n);\n\n    // Declar reg of output\n    reg                     	rempty            ;\n    reg 	[ADDRSIZE - 1 : 0]  raddr             ;\n    reg  	[ADDRSIZE : 0]      rptr              ;\n    reg							r_almost_empty    ;\n\n    // Declar pointer\n    reg     [ADDRSIZE : 0]  rbin        	            ; // binary read-pointer \n    wire    [ADDRSIZE : 0]  rbinnext    	            ; // binary read-pointer where the next address is to be read after increase\n    wire    [ADDRSIZE : 0]  rgraynext   	            ; // gray   read-pointer where the next address is to be read after increase\n	wire    [ADDRSIZE : 0]  rgraynextp1   	            ; // gray   read-pointer transfered from (rbinnext + 1)\n    \n    // Connect reg to ouput\n    assign      rempty_o            =   rempty          ;\n    assign      raddr_o             =   raddr           ;\n    assign      rptr_o              =   rptr            ;\n    assign      r_almost_empty_o    =   r_almost_empty  ;\n\n    // Gray pointer and binary pointer\n    always @ (posedge rclk_i,   negedge rrst_ni)\n    begin\n    \n        if (~rrst_ni)\n            {rptr, rbin}    <=  0                         ;\n        else\n            {rptr, rbin}    <=    {rgraynext, rbinnext}   ;\n    \n    end\n    \n    // Memory read-address pointer\n	always	@ (*)\n	begin\n\n		raddr     =   rbin[ADDRSIZE - 1 : 0]      ;\n\n	end\n    \n    assign  rbinnext    =   rbin + (rinc_i & ~rempty) ; // if buffer is empty, can not increase address\n\n    // Convert from binary to gray\n    assign  rgraynext   =   (rbinnext >> 1) ^ rbinnext  ;\n	assign	rgraynextp1	=	((rbinnext + 1) >> 1) ^ (rbinnext + 1)  ;\n    \n    // FIFO empty when the next rptr == synchronized write-pointer or reset\n    assign  rempty_val  		=   (rgraynext   == rq2_wptr_i)   ;\n	assign	r_almost_empty_val	=	(rgraynextp1 == rq2_wptr_i)   ;\n\n    always  @ (posedge rclk_i,  negedge rrst_ni)\n    begin\n    \n        if (~rrst_ni)\n			begin\n            	rempty    		    <=  1'b1                ;\n				r_almost_empty	    <=	1'b1		        ;\n			end\n\n        else\n			begin\n            	rempty    		    <=  rempty_val  		;\n				r_almost_empty	    <=	r_almost_empty_val	;\n			end\n    \n    end\n\nendmodule\n\n","lang":"verilog"};
processSrcData(g_data);